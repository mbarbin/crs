name: CRs Workflows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**" # This will match pull requests targeting any branch

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        runs-on: [ubuntu-latest]
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup dune
        id: setup-dune
        uses: ocaml-dune/setup-dune@v0.0.1
        with:
          automagic: false

      - name: Resolve dependencies
        shell: bash
        run: |
          dune pkg lock

      - name: Build & Install crs binary
        shell: bash
        run: |
          dune exec crs -- --version
          mkdir -p "${{ runner.temp }}/crs-bin"
          cp _build/default/bin/main.exe "${{ runner.temp }}/crs-bin/crs"
          echo "${{ runner.temp }}/crs-bin" >> $GITHUB_PATH
          crs --version

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1

      # Here we can have a few CRs workflows that should permit to test the crs
      # built from that PR and its interaction with other tools like reviewdog,
      # GitHub annotations, step summaries, etc.

      - name: Comment on CRs in PR
        uses: mbarbin/crs-actions/comment-crs-in-pr@v1.0.0-alpha.5
        with:
          crs-config: .github/crs-config.json

      - name: Summarize CRs in PR
        uses: mbarbin/crs-actions/summarize-crs-in-pr@v1.0.0-alpha.5
        with:
          crs-config: .github/crs-config.json
