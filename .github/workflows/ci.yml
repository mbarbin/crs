name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**" # This will match pull requests targeting any branch

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-compiler:
          - 5.3.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true
          opam-repositories: |
            default: https://github.com/ocaml/opam-repository.git
            mbarbin: https://github.com/mbarbin/opam-repository.git
      #     janestreet-bleeding: https://github.com/janestreet/opam-repository.git
      #     janestreet-bleeding-external: https://github.com/janestreet/opam-repository.git#external-packages

      - name: Install dependencies
        run: opam install . --deps-only --with-doc --with-test --with-dev-setup

      - name: Build
        run: opam exec -- dune build @all @lint

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1

      # Here we can have a few CRs workflow that should permit to test the crs
      # built from that PR and its interaction with other tools like reviewdog,
      # GitHub annotations, step summaries, etc.

      - name: Annotate CRs with reviewdog
        if: github.event_name == 'pull_request'
        run: |
          opam exec -- dune exec crs -- tools reviewdog annotate-crs \
            --config=.github/crs-config.json \
            --review-mode=pull-request \
            --pull-request-author="${{ github.event.pull_request.user.login }}" \
          | reviewdog -f=rdjson -name="crs" -reporter=github-pr-review
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add CRs summary to workflow run summary
        run: opam exec -- dune exec crs -- tools github summary-comment >> $GITHUB_STEP_SUMMARY

      - name: Run tests
        run: |
          mkdir $BISECT_DIR
          opam exec -- dune runtest --instrument-with bisect_ppx
        env:
          BISECT_DIR: ${{ runner.temp }}/_bisect_ppx_data
          BISECT_FILE: ${{ runner.temp }}/_bisect_ppx_data/data

      - name: Send coverage report to Coveralls
        run: opam exec -- bisect-ppx-report send-to Coveralls --coverage-path $BISECT_DIR
        env:
          BISECT_DIR: ${{ runner.temp }}/_bisect_ppx_data
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ github.event.number }}

      - name: Check for uncommitted changes
        run: git diff --exit-code

      - name: Lint opam
        uses: ocaml/setup-ocaml/lint-opam@v3

      - name: Lint fmt
        uses: ocaml/setup-ocaml/lint-fmt@v3

      - name: Lint doc
        uses: ocaml/setup-ocaml/lint-doc@v3
